## Install miniconda.

# Install into a folder other than home. 
Assuming you choose the following directory /work/sycuro_lab/username/miniconda3

# Change directory 
cd /work/sycuro_lab/username/miniconda3 

# Download the most recent Miniconda3 Linux 64-bit using wget.
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

# Install into a folder other than home. 
sh Miniconda3-latest-Linux-x86_64.sh –b –p /work/sycuro_lab/username/miniconda3

# If you don’t see (base) at the bottom left of you screen run the following commands;
/work/sycuro_lab/username/miniconda3/bin/conda init

# Start the conda environment instead of logging out and back in.
source ~/.bashrc


## Install Conda Environments

#Create the blast conda environment.
conda create --name blast_env

#Activate the blast conda environment.
conda activate blast_env

#Install blast conda package.
conda install -c bioconda blast

## Export conda environment for others.

# Export the blast conda environment for others to use.
conda env export > blast_env.yaml

# Any one can install the blast conda environment using a yaml file.
conda env create --file blast_env.yaml

# Activate the blast conda environment.
conda activate blast_env


1. Slurm Interactive job to run blast.

# Allocate an interactive node.
salloc --time 5:00:00 --partition cpu2017-bf05,cpu2019-bf05,cpu2021-bf24,cpu2019,cpu2021,cpu2022,cpu2013,bigmem,synergy -n 14 --mem 60G

# Activate the blast conda environment.
conda activate blast_env

# Make blastn output directory.
output_dir="interactive_job_blastn_output_dir"; 
mkdir -p $output_dir; 

# Make blast nucleotide database.
makeblastdb -in ../blast_databases/cpndb_nr_nut_seq.txt -dbtype nucl -out ${output_dir}/cpndb_nr_nut_seq; 

# Run the blastn command.
blastn -query ../fasta_files/cpndb_cart_nut_seq.txt -db ${output_dir}/cpndb_nr_nut_seq -out ${output_dir}/cart_seq_cpndb_nr_nut_seq_blastn.tsv -evalue 1e-05 -max_target_seqs 10 -num_threads 14 -outfmt '6 qseqid qlen sseqid stitle len qstart qend sstart send length evalue bitscore pident qcovs nident mismatch positive gaps qframe sframe'

# Add header to file.
echo "qseqid qlen sseqid stitle len qstart qend sstart send length evalue bitscore pident qcovs nident mismatch positive gaps qframe sframe" | tr ' ' '\t' | cat - ${output_dir}/cart_seq_cpndb_nr_nut_seq_blastn.tsv > ${output_dir}/cart_seq_cpndb_nr_nut_seq_blastn_header.tsv

# Make blastp output directory.
output_dir="interactive_job_blastp_output_dir";
mkdir -p $output_dir;

# Make blast protein database.
makeblastdb -in ../blast_databases/cpndb_nr_ut_seq.txt -dbtype prot -out ${output_dir}/cpndb_nr_ut_seq;

# Run the blastp command.
blastp -query ../fasta_files/cpndb_cart_ut_seq.txt -db ${output_dir}/cpndb_nr_ut_seq -out ${output_dir}/cart_seq_cpndb_nr_ut_seq_blastp.tsv -evalue 1e-05 -max_target_seqs 10 -num_threads 14 -outfmt '6 qseqid qlen sseqid stitle len qstart qend sstart send length evalue bitscore pident ppos qcovs nident mismatch positive gaps qframe sframe'

# Add header to file.
 echo "qseqid qlen sseqid stitle len qstart qend sstart send length evalue bitscore pident ppos qcovs nident mismatch positive gaps qframe sframe" | tr ' ' '\t' | cat - ${output_dir}/cart_seq_cpndb_nr_ut_seq_blastp.tsv > ${output_dir}/cart_seq_cpndb_nr_ut_seq_blastp_header.tsv


